#!/usr/bin/env python3
# encoding: utf-8
from akashic.db import addConnToParser, connectFromArgs
import rethinkdb as r
import os, sys, subprocess, tempfile, argparse
from collections import namedtuple
from deepdiff import DeepDiff

from yaml import load, dump
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper
import yaml

def editDataAsText(data):
    yml = yaml.dump_all(data, default_flow_style=False, allow_unicode=True, Dumper=Dumper)

    cmd = os.getenv('EDITOR')
    fd, temp_path = tempfile.mkstemp(prefix='rq.')

    with open(temp_path, "r+") as f:
        f.write(yml.replace('\n- ', '\n\n- '))
        f.seek(0)
        if "vim" in cmd:
            subprocess.check_call(cmd + ' -c "set syntax=yaml" ' + temp_path, shell=True)
        else:
            subprocess.check_call(cmd + ' ' + temp_path, shell=True)
        yml = f.read()
        f.truncate()
        f.close

    os.close(fd)
    os.remove(temp_path)
    return yml

from rethinkdb.ast import RqlBinary
def processQueryResult(data):
    """
    Right now all this does is drop RqlBinary data
    """
    if type(data)==dict:
        return {k:v for k,v in data.items() if type(v) != RqlBinary}
    elif type(data)==list:
        return [v for v in data if type(v) != RqlBinary]
    else:
        return data

def diffUnpack(diff):
    """
    Do not ask me how deepcopy works. I do not know.
    It is a mystery. You'd figure the results of this
    would be the default, since you can do

        obj = someDictSomewhere
        for i in objectPath:
            obj=obj[i]
    to evauluate a path without eval-ing.
    but whatever.
    """
    level = diff.all_up
    items=[]
    while level:
        next_rel = level.t1_child_rel or level.t2_child_rel
        if next_rel is None:
            break
        items.append(next_rel.param)
        level = level.down
    return items

def applyDiff(orig, new, conn):
    """
    Apply a python DeepDiff changeset to a rethinkdb object.
    """
    diff = DeepDiff(orig, new, ignore_order=True, view='tree')
    if 'dictionary_item_removed' in diff:
        removed = [diffUnpack(i) for i in diff['dictionary_item_removed']]
        print(orig)
        print(baseQuery.get(orig['id']).set_difference(removed).run(conn))
        orig.update(lambda d:
            d.set_difference([i for i in removed])
        ).run(conn)
        print(removed)

def editLoop(query, basequery, conn):
    data = list(processQueryResult(query.run(conn)))
    dataCache = {v['id']:v for v in data}
    while True:
        try:
            rawyml = editDataAsText(data)
            newdata = yaml.load_all(rawyml)
            break
        except Exception as E:
            print("Oops, that YAML didn't appear to be valid!", file=sys.stderr)
            print(E, file=sys.stderr)
            input("Press Enter to continue...")

    insertdata = []
    for datum in newdata:
        if 'id' in datum:
            orig = dataCache[datum['id']]
            diff = applyDiff(orig, datum, conn)
        else:
            insertdata.append(datum)
    basequery.insert(insertdata).run(conn)

def setupParser():
    parser = argparse.ArgumentParser(description='Edit a rethinkdb table',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        )
    parser.add_argument('query', type=str, nargs='?',
                        help='table to edit. Will expand in the future.')
    parser.add_argument('--limit', type=int, default=200,
                        help='How many rows to retrieve, maximum')
    parser.add_argument('--list-tables', action='store_true',
                        help='List all tables in current DB')
    parser.add_argument('--list-dbs', action='store_true',
                        help='List all the databases available')
    addConnToParser(parser)
    return parser

if __name__ == '__main__':
    parser=setupParser()
    args = parser.parse_args()
    if args.list_dbs:
        conn = r.connect()
        dbs = r.db_list().run(conn)
        print(dbs)
    conn = connectFromArgs(args)
    if args.list_tables:
        tables = r.table_list().run(conn)
        print(tables)
    if args.query:
        query = r
        global baseQuery
        baseQuery = query.table(args.query)
        query = baseQuery.limit(args.limit)
        editLoop(query, baseQuery, conn)

