#!/usr/bin/env python3
# encoding: utf-8

from yaml import load, dump
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper
import yaml
import ruamel.yaml
import os, sys, subprocess, tempfile
import argparse

from rethinkdb.ast import RqlBinary
def filters_DropBinaryData(data):
    """
    A filter to drop binary data from our representation.
    """
    if type(data) == RqlBinary:
        return None
    return data

import dateparser
import arrow
def filters_HumanToDate(data):
    newData=None
    if type(data) == str:
        newData = dateparser.parse(data, languages=['en',],settings={'STRICT_PARSING': True})
    if newData:
        newData = arrow.get(newData, 'local')
        newData = newData.to('utc').datetime
        return newData
    else:
        return data

import datetime
def filters_ForceTimeToUTC(data):
    if type(data)==datetime.datetime:
        time = arrow.get(data)
        time = time.to('utc').datetime
        return time
    else:
        return data

def filters_HumanizeTime(data):
    if type(data)==datetime.datetime:
        time=arrow.get(data)
        time = time.to('local')
        return time.datetime
#        return "{} #{}".format(time.format(), time.humanize())
    else:
        return data

from ruamel.yaml.comments import CommentedMap, CommentedSeq
def filters_EnableComments(data):
    if type(data) == dict:
        return CommentedMap(**data)
    elif type(data) == list:
        return CommentedSeq(*data)
    else:
        return data

def recursiveMap(filterSet, data):
    """
    Runs a list of function on all objects in a tree,
    and their children, and their children, etc.
    """
    if type(data) == dict:
        m = map(lambda d: (d[0], recursiveMap(filterSet, d[1])), data.items())
        return dict(m)
    elif type(data) == list:
        return map(lambda data: recursiveMap(filterSet, data), data) 
    else:
        for f in filterSet:
            data=f(data)
        return data

filtersToUser=[filters_DropBinaryData,filters_EnableComments,filters_HumanizeTime]
filtersToDb=[filters_HumanToDate,filters_ForceTimeToUTC]

def editData(data):
    data = map(lambda data: recursiveMap(filtersToUser, data,), data)
    yml= yaml.dump_all(list(data), default_flow_style=False, allow_unicode=True, Dumper=Dumper)

    cmd = os.getenv('EDITOR')
    fd, temp_path = tempfile.mkstemp(prefix='rq.')

    with open(temp_path, "r+") as f:
        f.write(yml.replace('\n- ', '\n\n- '))
        f.seek(0)
        if "vim" in cmd:
            subprocess.check_call(cmd + ' -c "set syntax=yaml" ' + temp_path, shell=True)
        else:
            subprocess.check_call(cmd + ' ' + temp_path, shell=True)
        yml = f.read()
        f.truncate()
        f.close

    os.close(fd)
    os.remove(temp_path)
    return yml

def action_edit(query, conn, filters=None):
    if 'EDITOR' not in os.environ:
        print("Please set the 'EDITOR' environment variable", file=sys.stderr)
        raise SystemExit(1)
    data = query.run(conn)
    if type(data) not in (list,str,dict):
        data = [item for item in data]
    else:
        data = [data,]

    while True:
        yml = editData(data)
        try:
          data = yaml.load_all(yml, Loader=Loader)
          break
        except Exception as E:
          print("Oops, that YAML didn't appear to be valid!", file=sys.stderr)
          print(E, file=sys.stderr)
          input("Press Enter to continue...")

    data = map(lambda data: recursiveMap(filtersToDb, data,), data)

    for i in data:
        if 'delete' in i and i['delete']:
            query[0].get(i['id']).delete().run(conn)
        elif 'id' in i:
            query[0].replace(i).run(conn)
        else:
            query[0].insert(i).run(conn)

import rethinkdb as r
parser = argparse.ArgumentParser(description='Edit a rethinkdb table',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
parser.add_argument('query', type=str, nargs='?',
                    help='table to edit. Will expand in the future.')
parser.add_argument('--list-tables', action='store_true',
                    help='List all tables in current DB')
parser.add_argument('--list-dbs', action='store_true',
                    help='List all the databases available')
from akashic.db import addConnToParser, connectFromArgs
addConnToParser(parser)

if __name__ == '__main__':
    args = parser.parse_args()
    if args.list_dbs:
        conn = r.connect()
        dbs = r.db_list().run(conn)
        print(dbs)
    conn = connectFromArgs(args)
    if args.list_tables:
        tables = r.table_list().run(conn)
        print(tables)
    if args.query:
        query = r
        query = query.table(args.query)
        action_edit(query, conn)
