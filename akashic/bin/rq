#!/usr/bin/env python3
# encoding: utf-8

from yaml import load, dump
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper
import yaml
import os, sys, subprocess, tempfile
import argparse

def editData(data):
    yml = yaml.safe_dump(data, default_flow_style=False, allow_unicode=True)
    cmd = os.getenv('EDITOR')
    fd, temp_path = tempfile.mkstemp(prefix='revim.')

    with open(temp_path, "r+") as f:
        f.write(yml.replace('\n- ', '\n\n- '))
        f.seek(0)
        if "vim" in cmd:
            subprocess.check_call(cmd + ' -c "set syntax=yaml" ' + temp_path, shell=True)
        else:
            subprocess.check_call(cmd + ' ' + temp_path, shell=True)
        yml = f.read()
        f.truncate()
        f.close

    os.close(fd)
    os.remove(temp_path)
    return yml

def action_edit(query, filters=None):
    if 'EDITOR' not in os.environ:
        print("Please set the 'EDITOR' environment variable", file=sys.stderr)
        raise SystemExit(1)
 
    if query[1]:
        data = query[1].run()
    else:
        data = query[0].run()
    if type(data) not in (list,str,dict):
        data = [item for item in data]
    else:
        data = [data,]

    while True:
        yml = editData(data)
        try:
          data = yaml.load(yml)
          break
        except Exception as E:
          print("Oops, that YAML didn't appear to be valid!", file=sys.stderr)
          print(E, file=sys.stderr)
          input("Press Enter to continue...")

    for i in data:
        if 'delete' in i and i['delete']:
            query[0].get(i['id']).delete().run()
        elif 'id' in i:
            query[0].replace(i).run()
        else:
            query[0].insert(i).run()

def interact():
    import code
    code.InteractiveConsole(locals=globals()).interact()

import rethinkdb as r
r.connect().repl()

parser = argparse.ArgumentParser(description='Edit a rethinkdb table')
parser.add_argument('paths', type=str, nargs='+',
                    help='list of database.tables to edit')
parser.add_argument('--db', type=str, nargs=1,
                    help='Which db to edit', default='akashic')
#parser.add_argument('--repl',"-r", dest='repl', action='store_true',help="Run in a python repl for more complicated queries")
#parser.add_argument('--remove',"-rm", dest='rm', action='store_cons',help="Deletes a row")
#parser.add_argument('--no-edit',"-n", dest='noedit', action='store_true',help="Read/write from stdout/in instead of opening vim")

args = parser.parse_args()

q=[]

for path in args.paths:
    items = None
    query = r
    query = query.db(args.db)
    query = query.table(path)
    items = [i for i in query.get_all().run()]
    q.append((query,items))

def edit():
    for item in q:
        action_edit(item)

edit()
